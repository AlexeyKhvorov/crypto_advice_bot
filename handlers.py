import datetime
import time

import pymysql
from aiogram import Router, F
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
import pandas as pd
from fpdf import FPDF
from datetime import datetime
from decimal import Decimal, ROUND_HALF_EVEN
import ccxt

import callback_factory
import config
import functions
import fsm
import keyboards
from bot import bot

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message,
                    state: FSMContext):
    await message.answer(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>crypto_advice_bot</b>! üëã\n\n - –ü–æ –∫–Ω–æ–ø–∫–µ <b>¬´–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç¬ª</b> ‚úçÔ∏è "
             "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ "
             "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –í–∞—Å –∏ –í–∞—à–∏—Ö —É—Å–ª–æ–≤–∏–π. \n - –ü–æ –∫–Ω–æ–ø–∫–µ "
             "<b>¬´–°–∫–æ–ª—å–∫–æ —è —É–∂–µ –º–æ–≥ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å¬ª ‚ùì</b> –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–æ–≥–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–æ–≥–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞—á–∞–≤ –º–∞–π–Ω–∏—Ç—å —Ä–∞–Ω—å—à–µ.\n"
             " - –ü–æ –∫–Ω–æ–ø–∫–µ <b>¬´–ö–∞–∫ –∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã –¥–µ—à–µ–≤–ª–µ —Ä—ã–Ω–∫–∞¬ª üõí</b> –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –æ–¥–Ω—É –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π "
             "–º–∞–π–Ω–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç—ã, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ–∫—É–ø–∞—Ç—å –ª—é–±–æ–π –∞–∫—Ç–∏–≤ –Ω–∞ —Ä—ã–Ω–∫–µ —Å –±–æ–ª—å—à–∏–º –¥–∏—Å–∫–æ–Ω—Ç–æ–º.\n"
             " - –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º –ø–æ "
             "–º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ <b>Yandex DataLens</b> üìä.\n\n"
             "–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboards.main_menu)
    functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), message.from_user.id, 'start')
    await state.clear()


@router.callback_query(F.data == 'return_to_main_menu')
async def main_menu(callback: CallbackQuery,
                    state: FSMContext):
    await callback.message.answer(
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>crypto_advice_bot</b>! üëã\n\n - –ü–æ –∫–Ω–æ–ø–∫–µ <b>¬´–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—á–µ—Ç¬ª</b> ‚úçÔ∏è "
             "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ "
             "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è –í–∞—Å –∏ –í–∞—à–∏—Ö —É—Å–ª–æ–≤–∏–π. \n - –ü–æ –∫–Ω–æ–ø–∫–µ "
             "<b>¬´–°–∫–æ–ª—å–∫–æ —è —É–∂–µ –º–æ–≥ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å¬ª ‚ùì</b> –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–æ–≥–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –º–æ–≥–ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–∞—á–∞–≤ –º–∞–π–Ω–∏—Ç—å —Ä–∞–Ω—å—à–µ.\n"
             " - –ü–æ –∫–Ω–æ–ø–∫–µ <b>¬´–ö–∞–∫ –∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã –¥–µ—à–µ–≤–ª–µ —Ä—ã–Ω–∫–∞¬ª üõí</b> –í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –æ–¥–Ω—É –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π "
             "–º–∞–π–Ω–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç—ã, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø–æ–∫—É–ø–∞—Ç—å –ª—é–±–æ–π –∞–∫—Ç–∏–≤ –Ω–∞ —Ä—ã–Ω–∫–µ —Å –±–æ–ª—å—à–∏–º –¥–∏—Å–∫–æ–Ω—Ç–æ–º.\n"
             " - –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º –ø–æ "
             "–º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ <b>Yandex DataLens</b> üìä.\n\n"
             "–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=keyboards.main_menu)
    await state.clear()


@router.callback_query(F.data == 'calculation')
async def calculation(callback: CallbackQuery,
                      state: FSMContext):
    functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id, 'calculation')
    await callback.message.edit_text(text="–û–∫–µ–π, –∫–∞–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º –≤—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç–µ (–≤ üí≤)? \n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ "
                                          "–Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    await callback.answer()
    await state.set_state(fsm.GetUserData.insert_budget)


@router.message(StateFilter(fsm.GetUserData.insert_budget),
                lambda x: x.text.isdigit() and int(x.text) > 0)
async def calculation_budget_success(message: Message,
                                     state: FSMContext):
    await state.update_data(budget=message.text)
    await message.answer(text="–°–∫–æ–ª—å–∫–æ —É –≤–∞—Å —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–∞–π–Ω–∏–Ω–≥–æ–≤—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π ‚ö° \n(–≤ –í—Ç*—á–∞—Å)?\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ "
                                 "–Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–º–∞–π–Ω–µ—Ä –≤ —Å—Ä–µ–¥–Ω–µ–º –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç <b>2000 - 3500 –í—Ç*—á–∞—Å</b>)")
    await state.set_state(fsm.GetUserData.insert_available_power)


@router.message(StateFilter(fsm.GetUserData.insert_budget))
async def calculation_budget_fail(message: Message,
                                  state: FSMContext):
    await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ü§î '
                                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                            reply_markup=keyboards.return_to_main_menu)
    await state.clear()


@router.message(StateFilter(fsm.GetUserData.insert_available_power),
                lambda x: x.text.isdigit() and int(x.text) > 0)
async def calculation_available_power_success(message: Message,
                                              state: FSMContext):
    await state.update_data(available_power=message.text)
    await message.answer(
        text="–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É ‚ö° —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–≤ üí≤) - —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É \n(–≤ —Å—Ä–µ–¥–Ω–µ–º –≤ –†–§ —Ü–µ–Ω–∞ –∑–∞ –≠–≠ <b>0.02 - 0.07</b> $/–∫–í—Ç)")
    await state.set_state(fsm.GetUserData.insert_electro_price)


@router.message(StateFilter(fsm.GetUserData.insert_available_power))
async def calculation_available_power_fail(message: Message,
                                           state: FSMContext):
    await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ü§î '
                                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                            reply_markup=keyboards.return_to_main_menu)
    await state.clear()


@router.message(StateFilter(fsm.GetUserData.insert_electro_price),
                lambda x: float(x.text) >= 0)
async def calculation_electro_price_success(message: Message,
                                            state: FSMContext):
    try:
        await state.update_data(electro_price=message.text)
        await message.answer(
            text="–•–æ—Ä–æ—à–æ, —Å –≤–∞—à–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å üëå. \n–î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. \n–ö–∞–∫—É—é "
                 "–∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π —Å—á–∏—Ç–∞–µ—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ–π –¥–ª—è —Å–µ–±—è?",
            reply_markup=keyboards.purpose_choice_menu)
        await state.set_state(fsm.GetUserData.insert_purpose)
    except ValueError:
        await message.answer(
            text=f"–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ ü§î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —Ü–µ–Ω—É "
                 f"—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=keyboards.return_to_main_menu)


@router.message(StateFilter(fsm.GetUserData.insert_electro_price))
async def calculation_electro_price_fail(message: Message,
                                         state: FSMContext):
    await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ü§î '
                                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                            reply_markup=keyboards.return_to_main_menu)
    await state.clear()


@router.callback_query(StateFilter(fsm.GetUserData.insert_purpose))
async def less_electricity_pay(callback: CallbackQuery,
                               state: FSMContext):
    await state.update_data(purpose=callback.data)
    await callback.message.edit_text(
        text="–£–∫–∞–∂–∏—Ç–µ <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –≤ –º–µ—Å—è—Ü</b>, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å—Å—Ç–∞—Ç—å—Å—è –¥–ª—è –æ–ø–ª–∞—Ç—ã "
             "—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–≤ üí≤)?")
    await callback.answer()
    await state.set_state(fsm.GetUserData.insert_max_electricity_pay)


@router.message(StateFilter(fsm.GetUserData.insert_max_electricity_pay),
                lambda x: x.text.isdigit() and int(x.text) > 0)
async def less_electricity_pay_success(message: Message,
                                       state: FSMContext):
    await state.update_data(max_electricity_pay=message.text)
    await message.answer(text="–°—É–ø–µ—Ä! –° —ç—Ç–∏–º —Ç–æ–∂–µ —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å! –ú–æ–∂–µ—Ç, –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –º–∞–π–Ω–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é"
                                 " –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É?",
                            reply_markup=keyboards.coin_choice_menu)
    await state.set_state(fsm.GetUserData.insert_coin)


@router.message(StateFilter(fsm.GetUserData.insert_max_electricity_pay))
async def less_electricity_pay_fail(message: Message,
                                    state: FSMContext):
    await message.answer(text=f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ü§î '
                                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                            reply_markup=keyboards.return_to_main_menu)
    await state.clear()


@router.callback_query(StateFilter(fsm.GetUserData.insert_coin), F.data == 'BTC')
async def coin_chosen_btc_380v(callback: CallbackQuery,
                               state: FSMContext):
    await state.update_data(coin=callback.data)
    await callback.message.edit_text(text="–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –£—Ç–æ—á–Ω–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–æ–π —Å–µ—Ç–∏ ‚ö°?",
                                     reply_markup=keyboards.btc_380_menu)
    await callback.answer()
    await state.set_state(fsm.GetUserData.insert_380v_for_btc)


@router.callback_query(StateFilter(fsm.GetUserData.insert_coin), F.data == 'Diversification')
async def coin_chosen_div_380v(callback: CallbackQuery,
                               state: FSMContext):
    await state.update_data(coin=callback.data)
    await callback.message.edit_text(text="–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –£—Ç–æ—á–Ω–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–æ–π —Å–µ—Ç–∏ ‚ö°?",
                                     reply_markup=keyboards.btc_380_menu)
    await state.set_state(fsm.GetUserData.insert_380v_for_btc)


@router.callback_query(StateFilter(fsm.GetUserData.insert_380v_for_btc))
async def coin_chosen_btc_or_div_hydro(callback: CallbackQuery,
                                       state: FSMContext):
    await state.update_data(v380=callback.data)
    await callback.message.edit_text(text="–•–æ—Ä–æ—à–æ, –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å - –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞—Å–∏–∫–∏ –Ω–∞ "
                                       "–≤–æ–¥—è–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è üåä?",
                                  reply_markup=keyboards.btc_hydro_menu)
    await state.set_state(fsm.GetUserData.insert_hydro_for_btc)


@router.callback_query(StateFilter(fsm.GetUserData.insert_hydro_for_btc))
async def coin_chosen_btc_or_div_final(callback: CallbackQuery,
                                       state: FSMContext):
    await state.update_data(hydro=callback.data)
    await callback.message.edit_text(text="–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤—Å–µ, —á—Ç–æ —è —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å "
                                       "—Ä–µ–∑—É–ª—å—Ç–∞—Ç', –∏ —è –∑–∞–ø—É—â—É —Ä–∞—Å—á–µ—Ç",
                                  reply_markup=keyboards.get_result_menu)
    await state.set_state(fsm.GetUserData.final_stage)


@router.callback_query(StateFilter(fsm.GetUserData.insert_coin))
async def coin_chosen_final(callback: CallbackQuery,
                            state: FSMContext):
    await state.update_data(coin=callback.data)
    await callback.message.edit_text(text="–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤—Å–µ, —á—Ç–æ —è —Ö–æ—Ç–µ–ª —É–∑–Ω–∞—Ç—å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å "
                                       "—Ä–µ–∑—É–ª—å—Ç–∞—Ç', –∏ —è –∑–∞–ø—É—â—É —Ä–∞—Å—á–µ—Ç",
                                  reply_markup=keyboards.get_result_menu)
    await state.set_state(fsm.GetUserData.final_stage)


@router.callback_query(StateFilter(fsm.GetUserData.final_stage))
async def get_result(callback: CallbackQuery,
                     state: FSMContext):
    fsm_result = await state.get_data()
    now = datetime.now()

    db_connection = pymysql.connect(host=config.host, database=config.database,
                                    user=config.user, password=config.password)

    query = ("SELECT name, correct_hash_rate, energy_consumption, price, coin, cool_type, fiat_profitability FROM "
             "asic_general_info_12_view")
    df = pd.read_sql(query, db_connection)
    df['specific_power_for_calculation'] = df.apply(functions.specific_power_for_calculation, axis=1)
    df['coin_risks'] = df.apply(functions.coin_risks, axis=1)
    df['v380'] = df.apply(functions.v380, axis=1)
    df['payback_in_months'] = df['price'] / ((df['fiat_profitability'] * 30 / df['specific_power_for_calculation'] *
                                              df['correct_hash_rate']) - (
                                                     float(fsm_result['electro_price']) * df[
                                                 'energy_consumption'] / 1000 * 720))
    df['monthly_profitability'] = ((df['fiat_profitability'] * 30 / df['specific_power_for_calculation'] *
                                    df['correct_hash_rate']) - (
                                           float(fsm_result['electro_price']) * df['energy_consumption'] / 1000 * 720))
    df['monthly_pay'] = float(fsm_result['electro_price']) * 720 * df['energy_consumption'] / 1000
    filtered_data = df.query("payback_in_months > 0 & monthly_profitability > 0 & monthly_pay >= 0")

    if fsm_result['purpose'] == 'quick_payback':
        df_sorted = filtered_data.sort_values(by='payback_in_months')
    elif fsm_result['purpose'] == 'highly_profit':
        df_sorted = filtered_data.sort_values(by='monthly_profitability', ascending=False)
    else:
        df_sorted = filtered_data.sort_values(by='monthly_pay')

    if fsm_result['coin'] == 'BTC':
        if fsm_result['v380'] == 'btc_380_yes':
            if fsm_result['hydro'] == 'btc_hydro_yes':
                final_filtered_df = df_sorted.query("coin == 'SHA-256 (BTC)'")
            elif fsm_result['hydro'] == 'btc_hydro_no':
                final_filtered_df = df_sorted.query("coin == 'SHA-256 (BTC)' & cool_type == '–í–æ–∑–¥—É—à–Ω–æ–µ'")
        elif fsm_result['v380'] == 'btc_380_no':
            final_filtered_df = df_sorted.query("coin == 'SHA-256 (BTC)' & v380 == 0 & cool_type == '–í–æ–∑–¥—É—à–Ω–æ–µ'")
    elif fsm_result['coin'] == 'ETC':
        final_filtered_df = df_sorted.query("coin == 'Ethash (ETC)'")
    elif fsm_result['coin'] == 'LTC':
        final_filtered_df = df_sorted.query("coin == 'Scrypt (LTC+DOGE)'")
    elif fsm_result['coin'] == 'DASH':
        final_filtered_df = df_sorted.query("coin == 'X11 (DASH)'")
    elif fsm_result['coin'] == 'KAS':
        final_filtered_df = df_sorted.query("coin == 'KHeavyHash (KAS)'")
    elif fsm_result['coin'] == 'CKB':
        final_filtered_df = df_sorted.query("coin == 'Eaglesong (CKB)'")
    elif fsm_result['coin'] == 'KDA':
        final_filtered_df = df_sorted.query("coin == 'Blake2s (KDA)'")
    elif fsm_result['coin'] == 'ALPH':
        final_filtered_df = df_sorted.query("coin == 'Blake3 (ALPH)'")
    elif fsm_result['coin'] == 'HNS':
        final_filtered_df = df_sorted.query("coin == 'Blake2B+SHA3 (HNS)'")
    elif fsm_result['coin'] == 'ZEC':
        final_filtered_df = df_sorted.query("coin == 'Equihash (ZEC)'")
    elif fsm_result['coin'] == 'Diversification':
        if fsm_result['v380'] == 'btc_380_yes':
            if fsm_result['hydro'] == 'btc_hydro_yes':
                final_filtered_df = df_sorted
            elif fsm_result['hydro'] == 'btc_hydro_no':
                final_filtered_df = df_sorted.query("cool_type == '–í–æ–∑–¥—É—à–Ω–æ–µ'")
        elif fsm_result['v380'] == 'btc_380_no':
            final_filtered_df = df_sorted.query("v380 == 0 & cool_type == '–í–æ–∑–¥—É—à–Ω–æ–µ'")

    if fsm_result['coin'] == 'Diversification':
        final_filtered_df_safety = final_filtered_df.query("coin_risks == 1")
        final_filtered_df_risk = final_filtered_df.query("coin_risks == 2")
        data_tuple_safety = list(final_filtered_df_safety.to_records(index=False))
        data_tuple_risk = list(final_filtered_df_risk.to_records(index=False))
        summary_list_safety = []
        summary_list_risk = []

        budget_safety = int(fsm_result['budget'])
        available_power_safety = int(fsm_result['available_power'])
        max_electricity_pay_safety = int(fsm_result['max_electricity_pay'])

        if fsm_result['purpose'] == 'quick_payback' or fsm_result['purpose'] == 'highly_profit':
            while budget_safety > 0 and available_power_safety > 0:
                added = False
                for sublist in data_tuple_safety:
                    if budget_safety >= sublist[3] and available_power_safety >= sublist[2]:
                        summary_list_safety.append(sublist)
                        budget_safety -= sublist[3]
                        available_power_safety -= sublist[2]
                        added = True
                        break

                if not added:
                    break
        else:
            while budget_safety > 0 and available_power_safety > 0 and max_electricity_pay_safety > 0:
                added = False
                for sublist in data_tuple_safety:
                    if (budget_safety >= sublist[3] and available_power_safety >= sublist[2] and
                            max_electricity_pay_safety >= sublist[-1]):
                        summary_list_safety.append(sublist)
                        budget_safety -= sublist[3]
                        available_power_safety -= sublist[2]
                        max_electricity_pay_safety -= sublist[-1]
                        added = True
                        break

                if not added:
                    break

        budget_risk = int(fsm_result['budget'])
        available_power_risk = int(fsm_result['available_power'])
        max_electricity_pay_risk = int(fsm_result['max_electricity_pay'])

        if fsm_result['purpose'] == 'quick_payback' or fsm_result['purpose'] == 'highly_profit':
            while budget_risk > 0 and available_power_risk > 0:
                added = False
                for sublist in data_tuple_risk:
                    if budget_risk >= sublist[3] and available_power_risk >= sublist[2]:
                        summary_list_risk.append(sublist)
                        budget_risk -= sublist[3]
                        available_power_risk -= sublist[2]
                        added = True
                        break

                if not added:
                    break
        else:
            while budget_risk > 0 and available_power_risk > 0 and max_electricity_pay_risk > 0:
                added = False
                for sublist in data_tuple_risk:
                    if (budget_risk >= sublist[3] and available_power_risk >= sublist[2] and
                            max_electricity_pay_risk >= sublist[-1]):
                        summary_list_risk.append(sublist)
                        budget_risk -= sublist[3]
                        available_power_risk -= sublist[2]
                        max_electricity_pay_risk -= sublist[-1]
                        added = True
                        break

                if not added:
                    break
        new_summary_list_safety = list(map(tuple, summary_list_safety))
        new_summary_list_risk = list(map(tuple, summary_list_risk))

        if new_summary_list_safety and new_summary_list_risk:
            dohod_safety = 0
            rashod_safety = 0
            summa_oborud_safety = 0

            for elem in new_summary_list_safety:
                dohod_safety += (elem[-2] + elem[-1])
                rashod_safety += elem[-1]
                summa_oborud_safety += elem[3]

            df_new_safety = pd.DataFrame(new_summary_list_safety,
                                         columns=['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)', '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.',
                                                  '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)', '–ê–ª–≥–æ—Ä–∏—Ç–º', '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', '–î–æ—Ö–æ–¥',
                                                  '–ö–æ–ª-–≤–æ',
                                                  '–†–∏—Å–∫', '380 –í', '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)',
                                                  '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.',
                                                  '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.'])

            df_final_safety = df_new_safety.groupby(['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ê–ª–≥–æ—Ä–∏—Ç–º'], as_index=False).agg({
                '–ö–æ–ª-–≤–æ': 'count',
                '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)': 'mean',
                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)': 'mean',
                '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'
            })

            df_final_safety.loc['–°—É–º–º–∞'] = df_final_safety.agg({'–ö–æ–ª-–≤–æ': 'sum', '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                                                                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                                                                '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                                                                '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'})
            df_final_safety = df_final_safety.round(decimals=1)

            purpose_dict = {
                'quick_payback': '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ–∫—É–ø–∏—Ç—å—Å—è',
                'highly_profit': '–ò–º–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥',
                'less_electricity_pay': '–ú–µ–Ω—å—à–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é'
            }

            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            pdf = FPDF(orientation='L', unit='mm', format='A4')
            pdf.add_page()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
            pdf.set_font('DejaVu', '', 9)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PDF
            pdf.cell(200, 5, txt=f"–û—Ç—á–µ—Ç –Ω–∞ {now.strftime('%d-%m-%Y %H:%M')}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ë—é–¥–∂–µ—Ç: {int(fsm_result['budget'])} $", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –≠–≠: {int(fsm_result['available_power'])} –í—Ç*—á–∞—Å", ln=True,
                     align='L')
            pdf.cell(200, 5, txt=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≠–≠: {fsm_result['electro_price']} $/–∫–í—Ç", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {fsm_result['coin']}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–¶–µ–ª—å: {purpose_dict[fsm_result['purpose']]}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –Ω–∞–¥–µ–∂–Ω–∞—è", ln=True, align='L')
            pdf.ln(10)
            pdf.set_font('DejaVu', '', 7)
            pdf.set_fill_color(200, 220, 255)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in df_final_safety.columns:
                if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                    pdf.cell(60, 10, str(col), 1, align='L')
                elif col == '–ö–æ–ª-–≤–æ':
                    pdf.cell(12, 10, str(col), 1, align='C')
                else:
                    pdf.cell(30, 10, str(col), 1, align='C')
            pdf.ln()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame
            for index, row in df_final_safety.iterrows():
                for col in df_final_safety.columns:
                    if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' and str(row[col]) == 'nan':
                        pdf.cell(60, 10, '–ò—Ç–æ–≥–æ', 1, align='L')
                    elif col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                        pdf.cell(60, 10, str(row[col]), 1, align='L')
                    elif str(row[col]) == 'nan' and (
                            col == '–ê–ª–≥–æ—Ä–∏—Ç–º' or col == '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)' or col == '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)'):
                        pdf.cell(30, 10, '-', 1, align='C')
                    elif col == '–ö–æ–ª-–≤–æ':
                        pdf.cell(12, 10, str(row[col]), 1, align='C')
                    else:
                        pdf.cell(30, 10, str(row[col]), 1, align='C')
                pdf.ln()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Ñ–∞–π–ª
            pdf.output(f"files/report_safety_id_{callback.from_user.id}.pdf")

            dohod_risk = 0
            rashod_risk = 0
            summa_oborud_risk = 0

            for elem in new_summary_list_risk:
                dohod_risk += (elem[-2] + elem[-1])
                rashod_risk += elem[-1]
                summa_oborud_risk += elem[3]

            df_new_risk = pd.DataFrame(new_summary_list_risk,
                                       columns=['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)', '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.',
                                                '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)', '–ê–ª–≥–æ—Ä–∏—Ç–º', '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', '–î–æ—Ö–æ–¥',
                                                '–ö–æ–ª-–≤–æ',
                                                '–†–∏—Å–∫', '380 –í', '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)',
                                                '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.',
                                                '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.'])

            df_final_risk = df_new_risk.groupby(['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ê–ª–≥–æ—Ä–∏—Ç–º'], as_index=False).agg({
                '–ö–æ–ª-–≤–æ': 'count',
                '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)': 'mean',
                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)': 'mean',
                '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'
            })

            df_final_risk.loc['–°—É–º–º–∞'] = df_final_risk.agg({'–ö–æ–ª-–≤–æ': 'sum', '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                                                            '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                                                            '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                                                            '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'})
            df_final_risk = df_final_risk.round(decimals=1)

            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            pdf = FPDF(orientation='L', unit='mm', format='A4')
            pdf.add_page()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
            pdf.set_font('DejaVu', '', 9)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PDF
            pdf.cell(200, 5, txt=f"–û—Ç—á–µ—Ç –Ω–∞ {now.strftime('%d-%m-%Y %H:%M')}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ë—é–¥–∂–µ—Ç: {int(fsm_result['budget'])} $", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –≠–≠: {int(fsm_result['available_power'])} –í—Ç*—á–∞—Å", ln=True,
                     align='L')
            pdf.cell(200, 5, txt=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≠–≠: {fsm_result['electro_price']} $/–∫–í—Ç", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {fsm_result['coin']}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–¶–µ–ª—å: {purpose_dict[fsm_result['purpose']]}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è", ln=True, align='L')
            pdf.ln(10)
            pdf.set_font('DejaVu', '', 7)
            pdf.set_fill_color(200, 220, 255)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in df_final_risk.columns:
                if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                    pdf.cell(60, 10, str(col), 1, align='L')
                elif col == '–ö–æ–ª-–≤–æ':
                    pdf.cell(12, 10, str(col), 1, align='C')
                else:
                    pdf.cell(30, 10, str(col), 1, align='C')
            pdf.ln()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame
            for index, row in df_final_risk.iterrows():
                for col in df_final_risk.columns:
                    if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' and str(row[col]) == 'nan':
                        pdf.cell(60, 10, '–ò—Ç–æ–≥–æ', 1, align='L')
                    elif col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                        pdf.cell(60, 10, str(row[col]), 1, align='L')
                    elif str(row[col]) == 'nan' and (
                            col == '–ê–ª–≥–æ—Ä–∏—Ç–º' or col == '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)' or col == '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)'):
                        pdf.cell(30, 10, '-', 1, align='C')
                    elif col == '–ö–æ–ª-–≤–æ':
                        pdf.cell(12, 10, str(row[col]), 1, align='C')
                    else:
                        pdf.cell(30, 10, str(row[col]), 1, align='C')
                pdf.ln()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Ñ–∞–π–ª
            pdf.output(f"files/report_risk_id_{callback.from_user.id}.pdf")
            await callback.message.answer(text='–ü–æ —Ä–∞—Å—á–µ—Ç–∞–º –∏ –≤–∞—à–∏–º –≤–≤–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–≤–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '
                                               '–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –Ω–∞–¥–µ–∂–Ω—É—é –∏ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—É—é')
            await callback.message.answer(text='–ù–∞–¥–µ–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:')
            await callback.message.bot.send_chat_action(
                chat_id=callback.from_user.id,
                action=ChatAction.UPLOAD_DOCUMENT
            )
            file_path = f"files/report_safety_id_{callback.from_user.id}.pdf"
            await callback.message.reply_document(document=FSInputFile(
                path=file_path,
                filename="Your_report_safety.pdf"
            ))
            await callback.message.answer(text=f"–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ - <b>$ {int(fsm_result['budget'])}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ - <b>$ {int(dohod_safety)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –≠–≠ –≤ <b>$ {fsm_result['electro_price']}/–∫–í—Ç</b>"
                                               f" - <b>$ {int(rashod_safety)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å - <b>$ {int(dohod_safety - rashod_safety)}</b>\n"
                                               f"–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ - <b>{round(float(summa_oborud_safety / (dohod_safety - rashod_safety)), 1)} –º–µ—Å.</b>\n")
            await callback.message.answer(text='–†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:')
            await callback.message.bot.send_chat_action(
                chat_id=callback.from_user.id,
                action=ChatAction.UPLOAD_DOCUMENT
            )
            file_path = f"files/report_risk_id_{callback.from_user.id}.pdf"
            await callback.message.reply_document(document=FSInputFile(
                path=file_path,
                filename="Your_report_risk.pdf"
            ))
            await callback.message.answer(text=f"–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ - <b>$ {int(fsm_result['budget'])}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ - <b>$ {int(dohod_risk)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –≠–≠ –≤ <b>$ {fsm_result['electro_price']}/–∫–í—Ç</b>"
                                               f" - <b>$ {int(rashod_risk)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å - <b>$ {int(dohod_risk - rashod_risk)}</b>\n"
                                               f"–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ - <b>{round(float(summa_oborud_risk / (dohod_risk - rashod_risk)), 1)} –º–µ—Å.</b>\n")
            functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                   'calculation_result')
            await callback.message.answer(
                text='<b>–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç, —Å–¥–µ–ª–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ '
                     '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏. \n–•–∞–ª–≤–∏–Ω–≥–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç '
                     '—Ç–∞–∫–∂–µ '
                     '–Ω–µ —É—á–∏—Ç–∞–Ω—ã –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö.</b>')
            await callback.message.answer(
                text='–° –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –º–æ–µ–º '
                     '—Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—â–µ–º—Å—è –¥–∞—à–±–æ—Ä–¥–µ: '
                     '<u>https://datalens.yandex/kth6k05xlg9c8</u>',
                reply_markup=keyboards.return_to_main_menu)
        elif new_summary_list_safety and not new_summary_list_risk:
            dohod = 0
            rashod = 0
            summa_oborud = 0

            for elem in new_summary_list_safety:
                dohod += (elem[-2] + elem[-1])
                rashod += elem[-1]
                summa_oborud += elem[3]

            df_new = pd.DataFrame(new_summary_list_safety,
                                  columns=['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)', '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.',
                                           '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)', '–ê–ª–≥–æ—Ä–∏—Ç–º', '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', '–î–æ—Ö–æ–¥',
                                           '–ö–æ–ª-–≤–æ',
                                           '–†–∏—Å–∫', '380 –í', '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)',
                                           '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.',
                                           '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.'])

            df_final = df_new.groupby(['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ê–ª–≥–æ—Ä–∏—Ç–º'], as_index=False).agg({
                '–ö–æ–ª-–≤–æ': 'count',
                '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)': 'mean',
                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)': 'mean',
                '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'
            })

            df_final.loc['–°—É–º–º–∞'] = df_final.agg({'–ö–æ–ª-–≤–æ': 'sum', '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                                                  '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                                                  '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                                                  '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'})
            df_final = df_final.round(decimals=1)

            purpose_dict = {
                'quick_payback': '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ–∫—É–ø–∏—Ç—å—Å—è',
                'highly_profit': '–ò–º–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥',
                'less_electricity_pay': '–ú–µ–Ω—å—à–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é'
            }

            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            pdf = FPDF(orientation='L', unit='mm', format='A4')
            pdf.add_page()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
            pdf.set_font('DejaVu', '', 9)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PDF
            pdf.cell(200, 5, txt=f"–û—Ç—á–µ—Ç –Ω–∞ {now.strftime('%d-%m-%Y %H:%M')}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ë—é–¥–∂–µ—Ç: {int(fsm_result['budget'])} $", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –≠–≠: {int(fsm_result['available_power'])} –í—Ç*—á–∞—Å", ln=True,
                     align='L')
            pdf.cell(200, 5, txt=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≠–≠: {fsm_result['electro_price']} $/–∫–í—Ç", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {fsm_result['coin']}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–¶–µ–ª—å: {purpose_dict[fsm_result['purpose']]}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: –Ω–∞–¥–µ–∂–Ω–∞—è", ln=True, align='L')
            pdf.ln(10)
            pdf.set_font('DejaVu', '', 7)
            pdf.set_fill_color(200, 220, 255)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in df_final.columns:
                if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                    pdf.cell(60, 10, str(col), 1, align='L')
                elif col == '–ö–æ–ª-–≤–æ':
                    pdf.cell(12, 10, str(col), 1, align='C')
                else:
                    pdf.cell(30, 10, str(col), 1, align='C')
            pdf.ln()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame
            for index, row in df_final.iterrows():
                for col in df_final.columns:
                    if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' and str(row[col]) == 'nan':
                        pdf.cell(60, 10, '–ò—Ç–æ–≥–æ', 1, align='L')
                    elif col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                        pdf.cell(60, 10, str(row[col]), 1, align='L')
                    elif str(row[col]) == 'nan' and (
                            col == '–ê–ª–≥–æ—Ä–∏—Ç–º' or col == '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)' or col == '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)'):
                        pdf.cell(30, 10, '-', 1, align='C')
                    elif col == '–ö–æ–ª-–≤–æ':
                        pdf.cell(12, 10, str(row[col]), 1, align='C')
                    else:
                        pdf.cell(30, 10, str(row[col]), 1, align='C')
                pdf.ln()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Ñ–∞–π–ª
            pdf.output(f"files/report_safety_id_{callback.from_user.id}.pdf")
            await callback.message.answer(text='–ü–æ —Ä–∞—Å—á–µ—Ç–∞–º –∏ –≤–∞—à–∏–º –≤–≤–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ '
                                               '–Ω–∞–¥–µ–∂–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:')
            await callback.message.bot.send_chat_action(
                chat_id=callback.from_user.id,
                action=ChatAction.UPLOAD_DOCUMENT
            )
            file_path = f"files/report_safety_id_{callback.from_user.id}.pdf"
            await callback.message.reply_document(document=FSInputFile(
                path=file_path,
                filename="Your_report.pdf"
            ))

            await callback.message.answer(text=f"–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ - <b>$ {int(fsm_result['budget'])}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ - <b>$ {int(dohod)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –≠–≠ –≤ <b>$ {fsm_result['electro_price']}/–∫–í—Ç</b>"
                                               f" - <b>$ {int(rashod)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å - <b>$ {int(dohod - rashod)}</b>\n"
                                               f"–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ - <b>{round(float(summa_oborud / (dohod - rashod)), 1)} –º–µ—Å.</b>\n")
            functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                   'calculation_result')
            await callback.message.answer(text='–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç, —Å–¥–µ–ª–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ '
                                               '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏. –•–∞–ª–≤–∏–Ω–≥–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç '
                                               '—Ç–∞–∫–∂–µ '
                                               '–Ω–µ —É—á–∏—Ç–∞–Ω—ã –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö.')
            await callback.message.answer(
                text='–° –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –º–æ–µ–º '
                     '—Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—â–µ–º—Å—è –¥–∞—à–±–æ—Ä–¥–µ: '
                     '<u>https://datalens.yandex/kth6k05xlg9c8</u>',
                reply_markup=keyboards.return_to_main_menu)
        elif new_summary_list_risk and not new_summary_list_safety:
            dohod = 0
            rashod = 0
            summa_oborud = 0

            for elem in new_summary_list_risk:
                dohod += (elem[-2] + elem[-1])
                rashod += elem[-1]
                summa_oborud += elem[3]

            df_new = pd.DataFrame(new_summary_list_risk,
                                  columns=['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)', '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.',
                                           '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)', '–ê–ª–≥–æ—Ä–∏—Ç–º', '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', '–î–æ—Ö–æ–¥',
                                           '–ö–æ–ª-–≤–æ',
                                           '–†–∏—Å–∫', '380 –í', '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)',
                                           '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.',
                                           '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.'])

            df_final = df_new.groupby(['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ê–ª–≥–æ—Ä–∏—Ç–º'], as_index=False).agg({
                '–ö–æ–ª-–≤–æ': 'count',
                '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)': 'mean',
                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)': 'mean',
                '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'
            })

            df_final.loc['–°—É–º–º–∞'] = df_final.agg({'–ö–æ–ª-–≤–æ': 'sum', '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                                                  '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                                                  '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                                                  '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'})
            df_final = df_final.round(decimals=1)

            purpose_dict = {
                'quick_payback': '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ–∫—É–ø–∏—Ç—å—Å—è',
                'highly_profit': '–ò–º–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥',
                'less_electricity_pay': '–ú–µ–Ω—å—à–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é'
            }

            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            pdf = FPDF(orientation='L', unit='mm', format='A4')
            pdf.add_page()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
            pdf.set_font('DejaVu', '', 9)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PDF
            pdf.cell(200, 5, txt=f"–û—Ç—á–µ—Ç –Ω–∞ {now.strftime('%d-%m-%Y %H:%M')}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ë—é–¥–∂–µ—Ç: {int(fsm_result['budget'])} $", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –≠–≠: {int(fsm_result['available_power'])} –í—Ç*—á–∞—Å", ln=True,
                     align='L')
            pdf.cell(200, 5, txt=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≠–≠: {fsm_result['electro_price']} $/–∫–í—Ç", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {fsm_result['coin']}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–¶–µ–ª—å: {purpose_dict[fsm_result['purpose']]}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è", ln=True, align='L')
            pdf.ln(10)
            pdf.set_font('DejaVu', '', 7)
            pdf.set_fill_color(200, 220, 255)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in df_final.columns:
                if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                    pdf.cell(60, 10, str(col), 1, align='L')
                elif col == '–ö–æ–ª-–≤–æ':
                    pdf.cell(12, 10, str(col), 1, align='C')
                else:
                    pdf.cell(30, 10, str(col), 1, align='C')
            pdf.ln()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame
            for index, row in df_final.iterrows():
                for col in df_final.columns:
                    if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' and str(row[col]) == 'nan':
                        pdf.cell(60, 10, '–ò—Ç–æ–≥–æ', 1, align='L')
                    elif col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                        pdf.cell(60, 10, str(row[col]), 1, align='L')
                    elif str(row[col]) == 'nan' and (
                            col == '–ê–ª–≥–æ—Ä–∏—Ç–º' or col == '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)' or col == '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)'):
                        pdf.cell(30, 10, '-', 1, align='C')
                    elif col == '–ö–æ–ª-–≤–æ':
                        pdf.cell(12, 10, str(row[col]), 1, align='C')
                    else:
                        pdf.cell(30, 10, str(row[col]), 1, align='C')
                pdf.ln()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Ñ–∞–π–ª
            pdf.output(f"files/report_risk_id_{callback.from_user.id}.pdf")
            await callback.message.answer(text='–ü–æ —Ä–∞—Å—á–µ—Ç–∞–º –∏ –≤–∞—à–∏–º –≤–≤–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ '
                                               '—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∞–π–Ω–∏–Ω–≥-–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:')
            await callback.message.bot.send_chat_action(
                chat_id=callback.from_user.id,
                action=ChatAction.UPLOAD_DOCUMENT
            )
            file_path = f"files/report_risk_id_{callback.from_user.id}.pdf"
            await callback.message.reply_document(document=FSInputFile(
                path=file_path,
                filename="Your_report.pdf"
            ))

            await callback.message.answer(text=f"–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ - <b>$ {int(fsm_result['budget'])}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ - <b>$ {int(dohod)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –≠–≠ –≤ <b>$ {fsm_result['electro_price']}/–∫–í—Ç</b>"
                                               f" - <b>$ {int(rashod)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å - <b>$ {int(dohod - rashod)}</b>\n"
                                               f"–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ - <b>{round(float(summa_oborud / (dohod - rashod)), 1)} –º–µ—Å.</b>\n")
            functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                   'calculation_result')
            await callback.message.answer(text='–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç, —Å–¥–µ–ª–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ '
                                               '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏. –•–∞–ª–≤–∏–Ω–≥–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç '
                                               '—Ç–∞–∫–∂–µ '
                                               '–Ω–µ —É—á–∏—Ç–∞–Ω—ã –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö.')
            await callback.message.answer(
                text='–° –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –º–æ–µ–º '
                     '—Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—â–µ–º—Å—è –¥–∞—à–±–æ—Ä–¥–µ: '
                     '<u>https://datalens.yandex/kth6k05xlg9c8</u>',
                reply_markup=keyboards.return_to_main_menu)
        else:
            await callback.message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ä–∞—Å—á–µ—Ç—ã –∏ –≤–∞—à–∏ –≤–≤–æ–¥–Ω—ã–µ, –Ω–µ –Ω–∞—à–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ '
                                               '–¥–ª—è –≤–∞—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ '
                                               '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—á–µ—Ç',
                                          reply_markup=keyboards.return_to_main_menu)

    # –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    else:
        data_tuple = list(final_filtered_df.to_records(index=False))
        summary_list = []

        budget = int(fsm_result['budget'])
        available_power = int(fsm_result['available_power'])
        max_electricity_pay = int(fsm_result['max_electricity_pay'])

        if fsm_result['purpose'] == 'quick_payback' or fsm_result['purpose'] == 'highly_profit':
            while budget > 0 and available_power > 0:
                added = False
                for sublist in data_tuple:
                    if budget >= sublist[3] and available_power >= sublist[2]:
                        summary_list.append(sublist)
                        budget -= sublist[3]
                        available_power -= sublist[2]
                        added = True
                        break

                if not added:
                    break
        else:
            while budget > 0 and available_power > 0 and max_electricity_pay > 0:
                added = False
                for sublist in data_tuple:
                    if budget >= sublist[3] and available_power >= sublist[2] and max_electricity_pay >= sublist[-1]:
                        summary_list.append(sublist)
                        budget -= sublist[3]
                        available_power -= sublist[2]
                        max_electricity_pay -= sublist[-1]
                        added = True
                        break

                if not added:
                    break

        new_summary_list = list(map(tuple, summary_list))
        if new_summary_list:
            dohod = 0
            rashod = 0
            summa_oborud = 0

            for elem in new_summary_list:
                dohod += (elem[-2] + elem[-1])
                rashod += elem[-1]
                summa_oborud += elem[3]

            df_new = pd.DataFrame(new_summary_list, columns=['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)', '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.',
                                                             '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)', '–ê–ª–≥–æ—Ä–∏—Ç–º', '–û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', '–î–æ—Ö–æ–¥',
                                                             '–ö–æ–ª-–≤–æ',
                                                             '–†–∏—Å–∫', '380 –í', '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)',
                                                             '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.',
                                                             '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.'])

            df_final = df_new.groupby(['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ê–ª–≥–æ—Ä–∏—Ç–º'], as_index=False).agg({
                '–ö–æ–ª-–≤–æ': 'count',
                '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)': 'mean',
                '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)': 'mean',
                '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'
            })

            df_final.loc['–°—É–º–º–∞'] = df_final.agg({'–ö–æ–ª-–≤–æ': 'sum', '–°—Ç–æ–∏–º–æ—Å—Ç—å (–≤ USD)': 'sum',
                                                  '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ, –í—Ç.': 'sum',
                                                  '–ü—Ä–∏–±—ã–ª—å (–≤ USD) –≤ –º–µ—Å.': 'sum',
                                                  '–†–∞—Å—Ö–æ–¥—ã (–≤ USD) –≤ –º–µ—Å.': 'sum'})
            df_final = df_final.round(decimals=1)

            purpose_dict = {
                'quick_payback': '–ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ–∫—É–ø–∏—Ç—å—Å—è',
                'highly_profit': '–ò–º–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥',
                'less_electricity_pay': '–ú–µ–Ω—å—à–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é'
            }

            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            pdf = FPDF(orientation='L', unit='mm', format='A4')
            pdf.add_page()

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –∏ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
            pdf.add_font('DejaVu', '', 'DejaVuSansCondensed.ttf', uni=True)
            pdf.set_font('DejaVu', '', 9)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ PDF
            pdf.cell(200, 5, txt=f"–û—Ç—á–µ—Ç –Ω–∞ {now.strftime('%d-%m-%Y %H:%M')}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ë—é–¥–∂–µ—Ç: {int(fsm_result['budget'])} $", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–î–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–º –≠–≠: {int(fsm_result['available_power'])} –í—Ç*—á–∞—Å", ln=True,
                     align='L')
            pdf.cell(200, 5, txt=f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≠–≠: {fsm_result['electro_price']} $/–∫–í—Ç", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {fsm_result['coin']}", ln=True, align='L')
            pdf.cell(200, 5, txt=f"–¶–µ–ª—å: {purpose_dict[fsm_result['purpose']]}", ln=True, align='L')
            pdf.ln(10)
            pdf.set_font('DejaVu', '', 7)
            pdf.set_fill_color(200, 220, 255)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
            for col in df_final.columns:
                if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                    pdf.cell(60, 10, str(col), 1, align='L')
                elif col == '–ö–æ–ª-–≤–æ':
                    pdf.cell(12, 10, str(col), 1, align='C')
                else:
                    pdf.cell(30, 10, str(col), 1, align='C')
            pdf.ln()

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ DataFrame
            for index, row in df_final.iterrows():
                for col in df_final.columns:
                    if col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' and str(row[col]) == 'nan':
                        pdf.cell(60, 10, '–ò—Ç–æ–≥–æ', 1, align='L')
                    elif col == '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ':
                        pdf.cell(60, 10, str(row[col]), 1, align='L')
                    elif str(row[col]) == 'nan' and (
                            col == '–ê–ª–≥–æ—Ä–∏—Ç–º' or col == '–•—ç—à—Ä–µ–π—Ç (1 —à—Ç.)' or col == '–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å (–≤ –º–µ—Å.)'):
                        pdf.cell(30, 10, '-', 1, align='C')
                    elif col == '–ö–æ–ª-–≤–æ':
                        pdf.cell(12, 10, str(row[col]), 1, align='C')
                    else:
                        pdf.cell(30, 10, str(row[col]), 1, align='C')
                pdf.ln()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF —Ñ–∞–π–ª
            pdf.output(f"files/report_id_{callback.from_user.id}.pdf")
            await callback.message.answer(text='–°—É–¥—è –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º –∏ –≤–∞—à–∏–º –≤–≤–æ–¥–Ω—ã–º, —ç—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–π–¥–µ—Ç –≤–∞–º –±–æ–ª—å—à–µ '
                                               '–≤—Å–µ–≥–æ:')
            await callback.message.bot.send_chat_action(
                chat_id=callback.from_user.id,
                action=ChatAction.UPLOAD_DOCUMENT
            )
            file_path = f"files/report_id_{callback.from_user.id}.pdf"
            await callback.message.reply_document(document=FSInputFile(
                path=file_path,
                filename="Your_report.pdf"
            ))

            await callback.message.answer(text=f"–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ - <b>$ {int(fsm_result['budget'])}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ - <b>$ {int(dohod)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –≠–≠ –≤ <b>$ {fsm_result['electro_price']}/–∫–í—Ç</b>"
                                               f" - <b>$ {int(rashod)}</b>\n"
                                               f"–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø—Ä–∏–±—ã–ª—å - <b>$ {int(dohod - rashod)}</b>\n"
                                               f"–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ - <b>{round(float(summa_oborud / (dohod - rashod)), 1)} –º–µ—Å.</b>\n")
            functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                   'calculation_result')
            await callback.message.answer(text='–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —ç—Ç–æ - —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç, —Å–¥–µ–ª–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º –∫—É—Ä—Å–µ '
                                               '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, –∞ —Ç–∞–∫–∂–µ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏. –•–∞–ª–≤–∏–Ω–≥–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç '
                                               '—Ç–∞–∫–∂–µ '
                                               '–Ω–µ —É—á–∏—Ç–∞–Ω—ã –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–∞—Ö.')
            await callback.message.answer(
                text='–° –±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –º–æ–µ–º '
                     '—Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—é—â–µ–º—Å—è –¥–∞—à–±–æ—Ä–¥–µ: '
                     '<u>https://datalens.yandex/kth6k05xlg9c8</u>',
                reply_markup=keyboards.return_to_main_menu)
        else:
            await callback.message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ä–∞—Å—á–µ—Ç—ã –∏ –≤–∞—à–∏ –≤–≤–æ–¥–Ω—ã–µ, –Ω–µ –Ω–∞—à–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ '
                                               '–¥–ª—è –≤–∞—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ '
                                               '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—á–µ—Ç',
                                          reply_markup=keyboards.return_to_main_menu)
    await state.clear()


@router.callback_query(F.data == 'fomo')
async def fomo_start(callback: CallbackQuery,
                     state: FSMContext):
    functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id, 'fomo')
    await callback.message.edit_text(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FOMO-—Ä–∞–∑–¥–µ–ª!\n–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–≥–ª—è–¥–Ω–æ —É–≤–∏–¥–µ—Ç—å <b>(–Ω–∞ "
                                       "—Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)</b>, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤—ã —É–∂–µ —É—Å–ø–µ–ª–∏ –ø–æ—Ç–µ—Ä—è—Ç—å, –ø–æ–∫–∞ –≤—ã –¥—É–º–∞–µ—Ç–µ, "
                                       "—Å—Ç–æ–∏—Ç –ª–∏ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –º–∞–π–Ω–∏–Ω–≥. –†–∞—Å—á–µ—Ç—ã —Å–¥–µ–ª–∞–Ω—ã —É–∂–µ <b>–ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ "
                                       "—Å–µ—Ç–∏</b>.\n–ò—Ç–∞–∫, –≤—ã–±–µ—Ä–µ–º –Ω–∞—à –∞—Å–∏–∫. –ö–∞–∫–æ–π –≤—ã–±–µ—Ä–µ—Ç–µ?\n"
                                       "(—Ç–µ–∫—Å—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∞—Å–∏–∫–∞ \n(<u><i>–ø—Ä–∏–º."
                                       " 'S21'</i></u>))")
    await state.set_state(fsm.Fomo.insert_asic_name)


@router.message(StateFilter(fsm.Fomo.insert_asic_name), F.text.len() > 1)
async def fomo_insert_asic(message: Message,
                           state: FSMContext):
    is_asics = await functions.asic_list(message.text)
    if is_asics:
        if len(is_asics) > 15:
            await message.answer(text='–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:(\n'
                                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ',
                                 reply_markup=keyboards.return_to_main_menu)
        else:
            await message.answer(text='–û–∫–µ–π, –≤–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
                                 reply_markup=await keyboards.create_asic_list_keyboard(message.text))
    else:
        await message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ :(\n'
                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                             reply_markup=keyboards.return_to_main_menu)


@router.message(StateFilter(fsm.Fomo.insert_asic_name))
async def fomo_insert_asic_fail(message: Message,
                                state: FSMContext):
    await message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ :(\n'
                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                         reply_markup=keyboards.return_to_main_menu)


@router.callback_query(callback_factory.AsicsList.filter())
async def fomo_choose_date(callback: CallbackQuery,
                           callback_data: callback_factory.AsicsList,
                           state: FSMContext):
    min_date = await functions.min_date_in_db(callback_data.item)
    await state.update_data(asic=callback_data.item)
    await state.update_data(date=min_date[0])
    await callback.message.edit_text(text=f'–° –∫–∞–∫–æ–π –¥–∞—Ç—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å? üìÖ\n–°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞ - '
                                       f'<b>{min_date[0]}</b>',
                                  reply_markup=keyboards.date_choose)


@router.callback_query(F.data == 'manual_date')
async def fomo_insert_manual_date(callback: CallbackQuery,
                                  state: FSMContext):
    await callback.message.edit_text(text='–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î üìÖ')
    await state.set_state(fsm.Fomo.insert_date)


@router.message(StateFilter(fsm.Fomo.insert_date), F.text)
async def fomo_insert_manual_date_check(message: Message,
                                        state: FSMContext):
    is_date_correct = await functions.date_check(message.text)
    if is_date_correct:
        await state.update_data(date=message.text)
        data = await state.get_data()
        dates = await functions.all_date_in_db(data['asic'])
        dates_corr = [date[0] for date in dates]
        nearest_date = min(dates_corr, key=lambda x: abs(datetime.strptime(str(x), "%Y-%m-%d")
                                                         - datetime.strptime(data['date'], "%Y-%m-%d")))
        await state.update_data(date=nearest_date)
        await message.answer(text=f"–ë–ª–∏–∂–∞–π—à–∞—è –¥–∞—Ç–∞ –∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–π - <b>{nearest_date}</b>\n–í—ã–±—Ä–∞—Ç—å —ç—Ç—É –¥–∞—Ç—É?",
                             reply_markup=keyboards.manual_date_confirm)
    else:
        await message.answer(text=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–π –í–∞–º–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=keyboards.return_to_main_menu)


@router.message(StateFilter(fsm.Fomo.insert_date))
async def fomo_insert_manual_date_check(message: Message,
                                        state: FSMContext):
    await message.answer(text=f"–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–∫—Å—Ç ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                         reply_markup=keyboards.return_to_main_menu)


@router.callback_query(F.data.in_(['early_date', 'manual_date_confirm_button']))
async def fomo_insert_electricity_price(callback: CallbackQuery,
                                        state: FSMContext):
    await callback.message.edit_text(
        text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É ‚ö° —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–≤ üí≤) - —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É \n(–≤ —Å—Ä–µ–¥–Ω–µ–º –≤ –†–§ —Ü–µ–Ω–∞ –∑–∞ –≠–≠ <b>0.02 - 0.07</b> $/–∫–í—Ç)')
    await state.set_state(fsm.Fomo.insert_electricity)


@router.message(StateFilter(fsm.Fomo.insert_electricity),
                lambda x: float(x.text) >= 0)
async def fomo_summary_confirm(message: Message,
                               state: FSMContext):
    try:
        await state.update_data(electricity_price=message.text)
        data = await state.get_data()
        asic = await functions.asic_list_accuracy(data['asic'])
        await message.answer(text=f"–ò—Ç–∞–∫, –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ. –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º—Å—è –∏ –∑–∞–ø—É—Å—Ç–∏–º —Ä–∞—Å—á–µ—Ç:\n"
                                  f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <b>{asic[0][0]}</b>\n"
                                  f"–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: <b>{int(asic[0][2])} –í—Ç</b>\n"
                                  f"–ê–ª–≥–æ—Ä–∏—Ç–º: <b>{asic[0][3]}</b>\n"
                                  f"–°—á–∏—Ç–∞–µ–º —Å –¥–∞—Ç—ã: <b>{data['date']}</b>\n"
                                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏: <b>{data['electricity_price']} $/–∫–í—Ç</b>",
                             reply_markup=keyboards.calculation_start)
        await state.set_state(fsm.Fomo.get_result)
    except ValueError:
        await message.answer(text=f"–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —Ü–µ–Ω—É "
                                  f"—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=keyboards.return_to_main_menu)


@router.message(StateFilter(fsm.Fomo.insert_electricity))
async def fomo_summary_confirm_fail(message: Message):
    await message.answer(text=f"–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                         reply_markup=keyboards.return_to_main_menu)


@router.callback_query(F.data == 'calculation_start', StateFilter(fsm.Fomo.get_result))
async def fomo_calculation_start(callback: CallbackQuery,
                                 state: FSMContext):
    data = await state.get_data()
    asic = await functions.asic_list_accuracy(data['asic'])
    if asic:
        if asic[0][3] == 'Scrypt (LTC+DOGE)':
            query = f"SELECT * FROM mining_profitability_bot_view WHERE name = '{asic[0][0]}' AND date >= '{data['date']}'"
            db = pymysql.connect(host=config.host, database=config.database,
                                 user=config.user, password=config.password)
            try:
                df = pd.read_sql(query, db)
                df_ltc = df.loc[(df['currency'] == 'LTC')]
                df_doge = df.loc[(df['currency'] == 'DOGE')]
                max_date_tuple = await functions.max_date_in_currency_exchange()
                max_date = max_date_tuple[0]
                currency_ltc_tuple = await functions.get_last_crypto_course_ltc(max_date)
                currency_doge_tuple = await functions.get_last_crypto_course_doge(max_date)
                currency_ltc = currency_ltc_tuple[0].quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                currency_doge = currency_doge_tuple[0].quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                crypto_sum_ltc = Decimal(df_ltc['crypto_sum'].sum()).quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                crypto_sum_doge = Decimal(df_doge['crypto_sum'].sum()).quantize(Decimal('0.00'),
                                                                                rounding=ROUND_HALF_EVEN)
                days_of_work = df_ltc['num_of_days'].sum()
                electricity_pay = days_of_work * asic[0][2] * 24 * float(data['electricity_price']) / 1000
                fiat_sum_ltc = (crypto_sum_ltc * currency_ltc).quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                fiat_sum_doge = (crypto_sum_doge * currency_doge).quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                start_price = df_ltc.loc[(df_ltc['date'] == data['date'])]['price'].values[0]
                start_fiat_profit_one_day = df_ltc.loc[(df_ltc['date'] == data['date'])]['fiat_sum_one_day'].values[0]
                current_price = df_ltc.loc[(df_ltc['date'] == max(df_ltc['date']))]['price'].values[0]
                last_date_in_list = max(df_ltc['date'])
                delta_price = start_price - current_price
                start_payback = round((start_price / (
                        start_fiat_profit_one_day - (asic[0][2] * 24 * float(data['electricity_price']) / 1000)) / 30),
                                      1)
                current_percent_payback = ((fiat_sum_ltc + fiat_sum_doge) - Decimal(electricity_pay)).quantize(
                    Decimal('0.00'),
                    rounding=ROUND_HALF_EVEN) / Decimal(
                    start_price) * 100
                days_of_mining = (datetime.now().date() - data['date']).days
                await callback.message.answer(text=f"–ê—Å–∏–∫: <b>{asic[0][0]}</b>\n"
                                                   f"–ê–ª–≥–æ—Ä–∏—Ç–º: <b>{asic[0][3]}</b>\n\n"
                                                   f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å <b>{data['date']}</b> –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤–∞–º –±—ã —É–∂–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–º–∞–π–Ω–∏—Ç—å: \n"
                                                   f"<b>{crypto_sum_ltc} LTC - ${fiat_sum_ltc.quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)} (—Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å - {currency_ltc} USDT</b>),\n"
                                                   f"<b>{crypto_sum_doge} DOGE - ${fiat_sum_doge.quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)} (—Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å - {currency_doge} USDT).</b>\n"
                                                   f"–û–ø–ª–∞—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é —Å–æ—Å—Ç–∞–≤–∏–ª–∞ –±—ã <b>${int(electricity_pay)}</b>. \n–ò—Ç–æ–≥–æ - –ø—Ä–∏–±—ã–ª—å <b>${((fiat_sum_ltc + fiat_sum_doge) - Decimal(electricity_pay)).quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)}</b>\n\n"
                                                   f"–¢–∞–∫–∂–µ —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. \n"
                                                   f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Å–∏–∫–∞ <b>{data['date']} - ${int(start_price)}</b>\n"
                                                   f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Å–∏–∫–∞ <b>{last_date_in_list} - ${int(current_price)}</b>\n"
                                                   f"–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Ü–µ–Ω–∞ {asic[0][0]} "
                                                   f"<b>{'—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å' if int(delta_price) < 0 else '—É–º–µ–Ω—å—à–∏–ª–∞—Å—å'} –Ω–∞ ${int(delta_price) if delta_price > 0 else -int(delta_price)} "
                                                   f"({round(delta_price / start_price * 100, 1) if delta_price > 0 else - round(delta_price / start_price * 100, 1)} %)</b>\n\n"
                                                   f"–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏. –ù–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏ <b>{data['date']}</b> {asic[0][0]} "
                                                   f"¬´–Ω–∞ –±—É–º–∞–≥–µ¬ª –æ–∫—É–ø–∞–ª—Å—è –∑–∞ <b>{start_payback} –º–µ—Å.</b>\n"
                                                   f"–°–µ–π—á–∞—Å –∂–µ, —Å–ø—É—Å—Ç—è <b>{round(days_of_mining / 30, 1)} –º–µ—Å.</b> –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞—Å–∏–∫ –æ–∫—É–ø–∏–ª—Å—è –±—ã –Ω–∞"
                                                   f" <b>{current_percent_payback.quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤!</b>")
                if current_percent_payback >= 100:
                    await callback.message.answer(
                        text=f"–¢–æ –µ—Å—Ç—å, <b>{asic[0][0]} –æ–∫—É–ø–∏–ª—Å—è –±—ã –∑–∞ {(days_of_mining / (current_percent_payback / 100) / 30).quantize(Decimal('0.0'), rounding=ROUND_HALF_EVEN)} –º–µ—Å.</b> –∏ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–ª –±—ã –≤ –ø–ª—é—Å!")
                else:
                    await callback.message.answer(
                        text=f"–†–∞—Å—á–µ—Ç–Ω–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É üíπ —Å–æ—Å—Ç–∞–≤–∏—Ç <b>{(days_of_mining / (current_percent_payback / 100) / 30).quantize(Decimal('0.0'), rounding=ROUND_HALF_EVEN)} –º–µ—Å.</b>")
                functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                       'fomo_result')
                await callback.message.answer(
                    text="–¢–∞–∫–∂–µ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ <b>—Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ ‚õèÔ∏è —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Ç–µ—Ç</b> –ø–æ"
                         " –≤—Å–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–∞–º, –∏ <b>—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–≥–ª–∏ –±—ã "
                         "–Ω–∞–º–∞–π–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, —á–µ–º –∑–∞–≤—Ç—Ä–∞ (–≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤).</b> "
                         "–ù–æ —Ä–µ—à–∞—Ç—å, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –≤–∞–º!\n\n"
                         "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è <b>—Å –¥–∞—à–±–æ—Ä–¥–æ–º –≤ BI-—Å–∏—Å—Ç–µ–º–µ Yandex Datalens üìä</b> - "
                         "—Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–æ–±–æ–π –ø–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, "
                         "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º! –í–æ—Ç —Å—Å—ã–ª–∫–∞: "
                         "<u>https://datalens.yandex/kth6k05xlg9c8</u>\n\n"
                         "–î–∞—à–±–æ—Ä–¥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. –¢–∞–∫–∂–µ –ø—Ä–æ—Å—å–±–∞ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—à–∏ "
                         "–ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏–¥–µ–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –±–æ—Ç—É –∏ –¥–∞—à–±–æ—Ä–¥—É –ø–æ –∫–Ω–æ–ø–∫–µ <b>¬´–û—Å—Ç–∞–≤–∏—Ç—å "
                         "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üí¨¬ª</b>.",
                    reply_markup=keyboards.fomo_end)


            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                db.close()
        else:
            query = f"SELECT * FROM mining_profitability_bot_view WHERE name = '{asic[0][0]}' AND date >= '{data['date']}'"
            db = pymysql.connect(host=config.host, database=config.database,
                                 user=config.user, password=config.password)
            try:
                df = pd.read_sql(query, db)
                currency = df['currency'].unique().tolist()[0]
                max_date_tuple = await functions.max_date_in_currency_exchange()
                max_date = max_date_tuple[0]
                currency_value_tuple = await functions.get_last_crypto_course(currency, max_date)
                currency_value = currency_value_tuple[0].quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                if asic[0][3] == 'SHA-256 (BTC)':
                    crypto_sum = Decimal(df['crypto_sum'].sum()).quantize(Decimal('0.0000'), rounding=ROUND_HALF_EVEN)
                else:
                    crypto_sum = Decimal(df['crypto_sum'].sum()).quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                days_of_work = df['num_of_days'].sum()
                electricity_pay = days_of_work * asic[0][2] * 24 * float(data['electricity_price']) / 1000
                fiat_sum = (crypto_sum * currency_value).quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)
                start_price = df.loc[(df['date'] == data['date'])]['price'].values[0]
                start_fiat_profit_one_day = df.loc[(df['date'] == data['date'])]['fiat_sum_one_day'].values[0]
                current_price = df.loc[(df['date'] == max(df['date']))]['price'].values[0]
                last_date_in_list = max(df['date'])
                delta_price = start_price - current_price
                start_payback = round((start_price / (
                        start_fiat_profit_one_day - (asic[0][2] * 24 * float(data['electricity_price']) / 1000)) / 30),
                                      1)
                current_percent_payback = (fiat_sum - Decimal(electricity_pay)).quantize(Decimal('0.00'),
                                                                                         rounding=ROUND_HALF_EVEN) / Decimal(
                    start_price) * 100
                days_of_mining = (datetime.now().date() - data['date']).days
                await callback.message.answer(text=f"–ê—Å–∏–∫: <b>{asic[0][0]}</b>\n"
                                                   f"–ê–ª–≥–æ—Ä–∏—Ç–º: <b>{asic[0][3]}</b>\n\n"
                                                   f"–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å <b>{data['date']}</b> –ø–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –≤–∞–º –±—ã —É–∂–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–º–∞–π–Ω–∏—Ç—å: \n<b>{crypto_sum} {currency}</b>, "
                                                   f"—á—Ç–æ –≤ –¥–æ–ª–ª–∞—Ä–æ–≤–æ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –∫—É—Ä—Å—É <b>{currency_value} USDT</b> —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>${fiat_sum.quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)}</b>.\n"
                                                   f"–û–ø–ª–∞—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é —Å–æ—Å—Ç–∞–≤–∏–ª–∞ –±—ã <b>${int(electricity_pay)}</b>. \n–ò—Ç–æ–≥–æ - –ø—Ä–∏–±—ã–ª—å <b>${(fiat_sum - Decimal(electricity_pay)).quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)}</b>\n\n"
                                                   f"–¢–∞–∫–∂–µ —Å—Ç–æ–∏—Ç —É–ø–æ–º—è–Ω—É—Ç—å –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. \n"
                                                   f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Å–∏–∫–∞ <b>{data['date']} - ${int(start_price)}</b>\n"
                                                   f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Å–∏–∫–∞ <b>{last_date_in_list} - ${int(current_price)}</b>\n"
                                                   f"–ó–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ —Ü–µ–Ω–∞ {asic[0][0]} "
                                                   f"<b>{'—É–≤–µ–ª–∏—á–∏–ª–∞—Å—å' if int(delta_price) < 0 else '—É–º–µ–Ω—å—à–∏–ª–∞—Å—å'} –Ω–∞ ${int(delta_price) if delta_price > 0 else -int(delta_price)} "
                                                   f"({round(delta_price / start_price * 100, 1) if delta_price > 0 else - round(delta_price / start_price * 100, 1)} %)</b>\n\n"
                                                   f"–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏. –ù–∞ –º–æ–º–µ–Ω—Ç –ø–æ–∫—É–ø–∫–∏ <b>{data['date']}</b> {asic[0][0]} "
                                                   f"¬´–Ω–∞ –±—É–º–∞–≥–µ¬ª –æ–∫—É–ø–∞–ª—Å—è –∑–∞ <b>{start_payback} –º–µ—Å.</b>\n"
                                                   f"–°–µ–π—á–∞—Å –∂–µ, —Å–ø—É—Å—Ç—è <b>{round(days_of_mining / 30, 1)} –º–µ—Å.</b> –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∞—Å–∏–∫ –æ–∫—É–ø–∏–ª—Å—è –±—ã –Ω–∞"
                                                   f" <b>{current_percent_payback.quantize(Decimal('0.00'), rounding=ROUND_HALF_EVEN)} –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤!</b>")
                if current_percent_payback >= 100:
                    await callback.message.answer(
                        text=f"–¢–æ –µ—Å—Ç—å, <b>{asic[0][0]} –æ–∫—É–ø–∏–ª—Å—è –±—ã –∑–∞ {(days_of_mining / (current_percent_payback / 100) / 30).quantize(Decimal('0.0'), rounding=ROUND_HALF_EVEN)} –º–µ—Å.</b> –∏ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–ª –±—ã –≤ –ø–ª—é—Å!")
                else:
                    await callback.message.answer(
                        text=f"–†–∞—Å—á–µ—Ç–Ω–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫—É—Ä—Å—É —Å–æ—Å—Ç–∞–≤–∏—Ç <b>{(days_of_mining / (current_percent_payback / 100) / 30).quantize(Decimal('0.0'), rounding=ROUND_HALF_EVEN)} –º–µ—Å.</b>")
                functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                       'fomo_result')
                await callback.message.answer(
                    text="–¢–∞–∫–∂–µ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ <b>—Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ ‚õèÔ∏è —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Ç–µ—Ç</b> –ø–æ"
                         " –≤—Å–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–∞–º, –∏ <b>—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–≥–ª–∏ –±—ã "
                         "–Ω–∞–º–∞–π–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, —á–µ–º –∑–∞–≤—Ç—Ä–∞ (–≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤).</b> "
                         "–ù–æ —Ä–µ—à–∞—Ç—å, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –≤–∞–º!\n\n"
                         "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è <b>—Å –¥–∞—à–±–æ—Ä–¥–æ–º –≤ BI-—Å–∏—Å—Ç–µ–º–µ Yandex Datalens üìä</b> - "
                         "—Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–æ–±–æ–π –ø–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, "
                         "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º! –í–æ—Ç —Å—Å—ã–ª–∫–∞: "
                         "<u>https://datalens.yandex/kth6k05xlg9c8</u>\n\n"
                         "–î–∞—à–±–æ—Ä–¥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. –¢–∞–∫–∂–µ –ø—Ä–æ—Å—å–±–∞ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—à–∏ "
                         "–ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏–¥–µ–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –±–æ—Ç—É –∏ –¥–∞—à–±–æ—Ä–¥—É –ø–æ –∫–Ω–æ–ø–∫–µ <b>¬´–û—Å—Ç–∞–≤–∏—Ç—å "
                         "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π üí¨¬ª</b>.",
                    reply_markup=keyboards.fomo_end)


            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                db.close()
    else:
        await callback.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                      reply_markup=keyboards.return_to_main_menu)

    await state.clear()


@router.callback_query(F.data == 'feedback')
async def feedback(callback: CallbackQuery,
                   state: FSMContext):
    functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id, 'feedback')
    await callback.message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ üí¨ (–º–æ–∂–Ω–æ —Å–∫—Ä–∏–Ω–∞–º–∏, —Ç–µ–∫—Å—Ç–æ–º, —Å—Ç–∏–∫–µ—Ä–∞–º–∏). \n"
                                  f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–∞–∫–∂–µ —Å–≤–æ–π <b>@username</b>")
    await state.set_state(fsm.Feedback.insert_feedback)


@router.message(StateFilter(fsm.Feedback.insert_feedback))
async def feedback_success(message: Message,
                           state: FSMContext):
    await bot.forward_message(chat_id=config.FEEDBACK_CHAT_ID, from_chat_id=message.chat.id,
                              message_id=message.message_id)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –°–ø–∞—Å–∏–±–æ!',
                         reply_markup=keyboards.return_to_main_menu)
    await state.clear()


@router.callback_query(F.data == 'cheap_coins')
async def cheap_start(callback: CallbackQuery,
                      state: FSMContext):
    functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id, 'cheap_coins')
    await callback.message.edit_text(text="–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å –º–æ–Ω–µ—Ç—ã –¥–µ—à–µ–≤–ª–µ, —á–µ–º –æ–Ω–∏ —Å—Ç–æ—è—Ç –Ω–∞ —Ä—ã–Ω–∫–µ? ü§î\n"
                                       "–ë–ª–∞–≥–æ–¥–∞—Ä—è –º–∞–π–Ω–∏–Ω–≥—É —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å! \n–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–π "
                                       "—Ä–∞—Å—á–µ—Ç, –∏ –≤—ã —Å–∞–º–∏ –≤ —ç—Ç–æ–º —É–±–µ–¥–∏—Ç–µ—Å—å! üõí\n"
                                       "–ò—Ç–∞–∫, –≤—ã–±–µ—Ä–µ–º –Ω–∞—à –º–∞–π–Ω–µ—Ä. –ö–∞–∫–æ–π –≤—ã–±–µ—Ä–µ—Ç–µ?\n"
                                       "<i><u>(—Ç–µ–∫—Å—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å –∞—Å–∏–∫–∞ (–ø—Ä–∏–º."
                                       " 'S21'))</u></i>")
    await state.set_state(fsm.CheapCoins.insert_asic_name)


@router.message(StateFilter(fsm.CheapCoins.insert_asic_name), F.text.len() > 1)
async def cheap_insert_asic(message: Message,
                            state: FSMContext):
    is_asics = await functions.asic_list(message.text)
    if is_asics:
        if len(is_asics) > 15:
            await message.answer(text='–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:(\n'
                                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ',
                                 reply_markup=keyboards.return_to_main_menu)
        else:
            await message.answer(text='–û–∫–µ–π, –≤–æ—Ç, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É:',
                                 reply_markup=await keyboards.create_cheap_asic_list_keyboard(message.text))
    else:
        await message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ :(\n'
                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                             reply_markup=keyboards.return_to_main_menu)


@router.message(StateFilter(fsm.CheapCoins.insert_asic_name))
async def cheap_insert_asic_fail(message: Message,
                                 state: FSMContext):
    await message.answer(text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ :(\n'
                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ',
                         reply_markup=keyboards.return_to_main_menu)


@router.callback_query(callback_factory.CheapAsicsList.filter(), StateFilter(fsm.CheapCoins.insert_asic_name))
async def cheap_insert_electro(callback: CallbackQuery,
                               callback_data: callback_factory.CheapAsicsList,
                               state: FSMContext):
    await state.update_data(asic=callback_data.item)
    await callback.message.edit_text(
        text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É ‚ö° —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (–≤ üí≤) - —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É \n(–≤ —Å—Ä–µ–¥–Ω–µ–º –≤ –†–§ —Ü–µ–Ω–∞ –∑–∞ –≠–≠ <b>0.02 - 0.07</b> $/–∫–í—Ç)')
    await state.set_state(fsm.CheapCoins.insert_electricity)


@router.message(StateFilter(fsm.CheapCoins.insert_electricity),
                lambda x: float(x.text) >= 0)
async def cheap_summary_confirm(message: Message,
                                state: FSMContext):
    try:
        await state.update_data(electricity_price=message.text)
        data = await state.get_data()
        asic = await functions.asic_list_accuracy(data['asic'])
        await message.answer(text=f"–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ. –î–∞–≤–∞–π—Ç–µ —Å–≤–µ—Ä–∏–º—Å—è –∏ –∑–∞–ø—É—Å—Ç–∏–º —Ä–∞—Å—á–µ—Ç:\n"
                                  f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: <b>{asic[0][0]}</b>\n"
                                  f"–≠–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: <b>{int(asic[0][2])} –í—Ç</b>\n"
                                  f"–ê–ª–≥–æ—Ä–∏—Ç–º: <b>{asic[0][3]}</b>\n"
                                  f"–°—Ç–æ–∏–º–æ—Å—Ç—å —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏: <b>{data['electricity_price']} $/–∫–í—Ç</b>",
                             reply_markup=keyboards.calculation_start)
        await state.set_state(fsm.CheapCoins.get_result)
    except ValueError:
        await message.answer(text=f"–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ ü§î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤–≤–æ–¥–∏—Ç–µ —Ü–µ–Ω—É "
                                  f"—ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                             reply_markup=keyboards.return_to_main_menu)


@router.message(StateFilter(fsm.CheapCoins.insert_electricity))
async def cheap_summary_confirm_fail(message: Message):
    await message.answer(text=f"–¢–æ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏, –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ ü§î. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                         reply_markup=keyboards.return_to_main_menu)


@router.callback_query(F.data == 'calculation_start', StateFilter(fsm.CheapCoins.get_result))
async def cheap_calculation_start(callback: CallbackQuery,
                                  state: FSMContext):
    data = await state.get_data()
    asic = await functions.asic_list_accuracy(data['asic'])
    if asic:
        if asic[0][3] == 'Scrypt (LTC+DOGE)':
            query = f"SELECT * FROM mining_profitability_bot_view_last_date WHERE name = '{asic[0][0]}'"
            db = pymysql.connect(host=config.host, database=config.database,
                                 user=config.user, password=config.password)
            try:
                await callback.message.bot.send_chat_action(
                    chat_id=callback.from_user.id,
                    action=ChatAction.TYPING)
                df = pd.read_sql(query, db)
                df = df.head(1)
                await callback.message.bot.send_chat_action(
                    chat_id=callback.from_user.id,
                    action=ChatAction.TYPING)
                if not df.empty:
                    self_cost_1_usdt = ((df['energy_consumption'] / 1000 * 24 * float(data['electricity_price'])) /
                                        (df['fiat_profitability'] / df['specific_power_for_calculation'] * df[
                                            'correct_hash_rate'])).values[0]
                    exchange = ccxt.binance()
                    tickers = ['BTC', 'ETH', 'SOL', 'TON', 'BNB', 'APT', 'SUI', 'ARB', 'OP']
                    tickers_full = ['Bitcoin', 'Ethereum', 'Solana', 'Toncoin', 'Binance Coin', 'Aptos', 'Sui',
                                    'Arbitrum', 'Optimism']
                    tickers_value = []
                    for ticker in tickers:
                        tickers_value.append(exchange.fetch_ticker(f'{ticker}/USDT')['last'])
                    tickers_cheap_value = [round(ticker_value * self_cost_1_usdt, 2) for ticker_value in tickers_value]
                    currency_result = list(zip(tickers, tickers_full, tickers_value, tickers_cheap_value))
                    currency_string = '\n'.join([
                        f"<b>{ticket[0]}</b> ({ticket[1]}) - –≤–∞—à–∞ —Ü–µ–Ω–∞ <b>${ticket[3]}</b> (–ø–æ —Ä—ã–Ω–∫—É ${ticket[2]})"
                        for ticket in currency_result])
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    await callback.message.answer(
                        text=f"–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ "
                             f"–æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é—Ç —ç—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. \n–ü—Ä–∏–≤–µ–¥—É —Å–ª–µ–¥—É—é—â–∏–π "
                             f"–ø—Ä–∏–º–µ—Ä:")
                    await callback.message.answer(
                        text=f"–ó–∞ –º–µ—Å—è—Ü —Ä–∞–±–æ—Ç—ã –≤–∞—à –º–∞–π–Ω–µ—Ä –¥–æ–±—ã–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ <b>$500</b>, –∑–∞—Ç—Ä–∞—Ç–∏–≤ "
                             f"–ø—Ä–∏ —ç—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏  –Ω–∞ ‚ö° <b>$100</b>. \n–ü–æ—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—Å–µ–≥–æ "
                             f"$100, –≤—ã –∑–∞ $500 –ø—Ä–æ–¥–∞–µ—Ç–µ –≤–∞—à—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –±–∏—Ä–∂–∞—Ö –∏ "
                             f"–ø–æ–∫—É–ø–∞–µ—Ç–µ —Ç—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –¥–µ—Ä–∂–∞—Ç—å –≤ –¥–æ–ª–≥–æ—Å—Ä–æ–∫, "
                             f"–ø–æ—Ç—Ä–∞—Ç–∏–≤ –≤—Å–µ–≥–æ $100. \n–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ "
                             f"–¥–æ–±—ã—Ç–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –≤–∞—Å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ $0.2, –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—É—é "
                             f"–∫—Ä–∏–ø—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ <b>5 (!!!) —Ä–∞–∑</b> –¥–µ—à–µ–≤–ª–µ "
                             f"—Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã. \n–ê —Ç–µ–ø–µ—Ä—å –∫ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É:")
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    time.sleep(5)
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    await callback.message.answer(text=f"–ú–∞–π–Ω–µ—Ä: <b>{asic[0][0]}</b>\n"
                                                       f"–ê–ª–≥–æ—Ä–∏—Ç–º: <b>{asic[0][3]}</b>\n"
                                                       f"–¶–µ–Ω–∞ –∑–∞ 1 –∫–í—Ç: <b>${data['electricity_price']}</b>\n\n"
                                                       f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±—ã—á–∏ 1 USDT –¥–ª—è {asic[0][0]} - "
                                                       f"<b>${round(self_cost_1_usdt, 2)}</b>, –∏ –≤–æ—Ç –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å "
                                                       f"–Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
                                                       f"{currency_string}")
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    time.sleep(10)
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    if self_cost_1_usdt > 1:
                        await callback.message.answer(
                            text=f"–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —Ç–∞–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–∫—É–ø–∞–µ–º–æ–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç :(")
                        functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                               'cheap_coins_result')
                    else:
                        await callback.message.answer(
                            text=f"P.S. –°–ª–µ–¥—É–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞</b>, "
                                 f"–ø–æ–∫–∞ –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ –≤–∞—à –Ω–∞–º–∞–π–Ω–µ–Ω–Ω—ã–π {asic[0][3].split('(')[1].split(')')[0]}"
                                 f" –∏ –Ω–∞ –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∞–µ—Ç–µ –∫—Ä–∏–ø—Ç—É.\n–ò –≤—Ç–æ—Ä–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å.\n"
                                 f"<b>–ë–æ–ª—å—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ -> –±–æ–ª—å—à–µ –ø–ª–∞—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é -> –±–æ–ª—å—à–µ –¥–µ—à–µ–≤—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏</b>.\n–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –∞—Ä—Å–µ–Ω–∞–ª–µ –∏–º–µ–µ—Ç—Å—è –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ—â–Ω–æ—Å—Ç—å—é 100 –í–∞—Ç—Ç –∏ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, —Å–∫–∞–∂–µ–º,"
                                 f"$5 –≤ –º–µ—Å—è—Ü, —Ç–æ –Ω–µ—Ç—Ä—É–¥–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç—ã –≤–∞–º —É–¥–∞—Å—Ç—Å—è –∫—É–ø–∏—Ç—å "
                                 f"(<u>—Å–ø–æ–π–ª–µ—Ä: –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ</u>).\n"
                                 f"–ü–æ—ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —á—Ç–æ–±—ã –≤—ã –ø–æ–Ω—è–ª–∏ –ø–æ—Ä—è–¥–æ–∫ —á–∏—Å–µ–ª:")
                        await callback.message.bot.send_chat_action(
                            chat_id=callback.from_user.id,
                            action=ChatAction.TYPING)
                        time.sleep(3)
                        await callback.message.bot.send_chat_action(
                            chat_id=callback.from_user.id,
                            action=ChatAction.TYPING)
                        await callback.message.answer(
                            text=f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ –º–µ—Å—è—Ü —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä–∏–ø—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ $1000 "
                                 f"<b>(–¥–ª—è –≤–∞—Å —ç—Ç–æ ${round(1000 * round(self_cost_1_usdt, 2), 0)})</b> –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –∞—Å–∏–∫–æ–≤ {asic[0][0]}"
                                 f" –Ω–∞ —Å—É–º–º—É ${round(((1000 * round(self_cost_1_usdt, 2) / (float(data['electricity_price']) * df['energy_consumption'] * 720 / 1000)) * df['price']).values[0], 0)}.\n"
                                 f"<b>–≠—Ç–æ –ø–æ—Ä—è–¥–∫–∞ {round((1000 * round(self_cost_1_usdt, 2) / (float(data['electricity_price']) * df['energy_consumption'] * 720 / 1000)).values[0], 1)} –∞—Å–∏–∫–æ–≤</b>.")
                        await callback.message.bot.send_chat_action(
                            chat_id=callback.from_user.id,
                            action=ChatAction.TYPING)
                        time.sleep(3)
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    time.sleep(3)
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    await callback.message.answer(
                        text="P.P.S. –¢–∞–∫–∂–µ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ <b>—Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ ‚õèÔ∏è —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Ç–µ—Ç</b> –ø–æ"
                             " –≤—Å–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–∞–º, –∏ <b>—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–≥–ª–∏ –±—ã "
                             "–Ω–∞–º–∞–π–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, —á–µ–º –∑–∞–≤—Ç—Ä–∞ (–≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤).</b> "
                             "–ù–æ —Ä–µ—à–∞—Ç—å, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –≤–∞–º!\n\n"
                             "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è <b>—Å –¥–∞—à–±–æ—Ä–¥–æ–º –≤ BI-—Å–∏—Å—Ç–µ–º–µ Yandex Datalens</b> - "
                             "—Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–æ–±–æ–π –ø–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, "
                             "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º! –í–æ—Ç —Å—Å—ã–ª–∫–∞: "
                             "<u>https://datalens.yandex/kth6k05xlg9c8</u>\n\n"
                             "–î–∞—à–±–æ—Ä–¥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. –¢–∞–∫–∂–µ –ø—Ä–æ—Å—å–±–∞ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—à–∏ "
                             "–ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏–¥–µ–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –±–æ—Ç—É –∏ –¥–∞—à–±–æ—Ä–¥—É –ø–æ –∫–Ω–æ–ø–∫–µ <b>¬´–û—Å—Ç–∞–≤–∏—Ç—å "
                             "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª</b>.",
                        reply_markup=keyboards.fomo_end)
                    functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                           'cheap_coins_result')
                else:
                    await callback.message.answer(
                        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ—Ç –º–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ :(\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                        reply_markup=keyboards.return_to_main_menu)


            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                db.close()
        else:
            query = f"SELECT * FROM mining_profitability_bot_view_last_date WHERE name = '{asic[0][0]}'"
            db = pymysql.connect(host=config.host, database=config.database,
                                 user=config.user, password=config.password)
            try:
                await callback.message.bot.send_chat_action(
                    chat_id=callback.from_user.id,
                    action=ChatAction.TYPING)
                df = pd.read_sql(query, db)
                await callback.message.bot.send_chat_action(
                    chat_id=callback.from_user.id,
                    action=ChatAction.TYPING)
                if not df.empty:
                    self_cost_1_usdt = ((df['energy_consumption'] / 1000 * 24 * float(data['electricity_price'])) /
                                        (df['fiat_profitability'] / df['specific_power_for_calculation'] * df[
                                            'correct_hash_rate'])).values[0]
                    exchange = ccxt.binance()
                    tickers = ['BTC', 'ETH', 'SOL', 'TON', 'BNB', 'APT', 'SUI', 'ARB', 'OP']
                    tickers_full = ['Bitcoin', 'Ethereum', 'Solana', 'Toncoin', 'Binance Coin', 'Aptos', 'Sui',
                                    'Arbitrum',
                                    'Optimism']
                    tickers_value = []
                    for ticker in tickers:
                        tickers_value.append(exchange.fetch_ticker(f'{ticker}/USDT')['last'])
                    tickers_cheap_value = [round(ticker_value * self_cost_1_usdt, 2) for ticker_value in tickers_value]
                    currency_result = list(zip(tickers, tickers_full, tickers_value, tickers_cheap_value))
                    currency_string = '\n'.join([
                        f"<b>{ticket[0]}</b> ({ticket[1]}) - –í–∞—à–∞ —Ü–µ–Ω–∞ <b>${ticket[3]}</b> (–ø–æ —Ä—ã–Ω–∫—É ${ticket[2]})"
                        for ticket in currency_result])
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    await callback.message.answer(
                        text=f"–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ "
                             f"–æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é—Ç —ç—Ç—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. \n–ü—Ä–∏–≤–µ–¥—É —Å–ª–µ–¥—É—é—â–∏–π "
                             f"–ø—Ä–∏–º–µ—Ä:")
                    await callback.message.answer(
                        text=f"–ó–∞ –º–µ—Å—è—Ü —Ä–∞–±–æ—Ç—ã –≤–∞—à –º–∞–π–Ω–µ—Ä –¥–æ–±—ã–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ <b>$500</b>, –∑–∞—Ç—Ä–∞—Ç–∏–≤ "
                             f"–ø—Ä–∏ —ç—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏  –Ω–∞ ‚ö° <b>$100</b>. \n–ü–æ—Ç—Ä–∞—Ç–∏–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—Å–µ–≥–æ "
                             f"$100, –≤—ã –∑–∞ $500 –ø—Ä–æ–¥–∞–µ—Ç–µ –≤–∞—à—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ –±–∏—Ä–∂–∞—Ö –∏ "
                             f"–ø–æ–∫—É–ø–∞–µ—Ç–µ —Ç—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é –≥–æ—Ç–æ–≤—ã –¥–µ—Ä–∂–∞—Ç—å –≤ –¥–æ–ª–≥–æ—Å—Ä–æ–∫, "
                             f"–ø–æ—Ç—Ä–∞—Ç–∏–≤ –≤—Å–µ–≥–æ $100. \n–ò–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ "
                             f"–¥–æ–±—ã—Ç–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –≤–∞—Å —Å–æ—Å—Ç–∞–≤–∏–ª–∞ $0.2, –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—É—é "
                             f"–∫—Ä–∏–ø—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ <b>5 (!!!) —Ä–∞–∑</b> –¥–µ—à–µ–≤–ª–µ "
                             f"—Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã. \n–ê —Ç–µ–ø–µ—Ä—å –∫ –≤–∞—à–µ–º—É –ø—Ä–∏–º–µ—Ä—É:")
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    time.sleep(5)
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    await callback.message.answer(text=f"–ú–∞–π–Ω–µ—Ä: <b>{asic[0][0]}</b>\n"
                                                       f"–ê–ª–≥–æ—Ä–∏—Ç–º: <b>{asic[0][3]}</b>\n"
                                                       f"–¶–µ–Ω–∞ –∑–∞ 1 –∫–í—Ç: <b>${data['electricity_price']}</b>\n\n"
                                                       f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–±—ã—á–∏ 1 USDT –¥–ª—è {asic[0][0]} - "
                                                       f"<b>${round(self_cost_1_usdt, 2)}</b>, –∏ –≤–æ—Ç –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å "
                                                       f"–Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
                                                       f"{currency_string}")
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    time.sleep(10)
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    if self_cost_1_usdt > 1:
                        await callback.message.answer(
                            text=f"–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ —Ç–∞–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–∫—É–ø–∞–µ–º–æ–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç :(")
                        functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                               'cheap_coins_result')
                    else:
                        await callback.message.answer(
                            text=f"P.S. –°–ª–µ–¥—É–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç <b>–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞</b>, "
                                 f"–ø–æ–∫–∞ –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ –≤–∞—à –Ω–∞–º–∞–π–Ω–µ–Ω–Ω—ã–π {asic[0][3].split('(')[1].split(')')[0]}"
                                 f" –∏ –Ω–∞ –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∞–µ—Ç–µ –∫—Ä–∏–ø—Ç—É.\n–ò –≤—Ç–æ—Ä–æ–π –º–æ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å.\n"
                                 f"<b>–ë–æ–ª—å—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ -> –±–æ–ª—å—à–µ –ø–ª–∞—Ç–∞ –∑–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é -> –±–æ–ª—å—à–µ –¥–µ—à–µ–≤—ã—Ö –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏</b>.\n"
                                 f"–ï—Å–ª–∏ –≤ –≤–∞—à–µ–º –∞—Ä—Å–µ–Ω–∞–ª–µ –∏–º–µ–µ—Ç—Å—è –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ—â–Ω–æ—Å—Ç—å—é 100 –í–∞—Ç—Ç –∏ –≤—ã –ø–ª–∞—Ç–∏—Ç–µ –∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ, —Å–∫–∞–∂–µ–º, "
                                 f"$5 –≤ –º–µ—Å—è—Ü, —Ç–æ –Ω–µ—Ç—Ä—É–¥–Ω–æ –¥–æ–≥–∞–¥–∞—Ç—å—Å—è, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç—ã –≤–∞–º —É–¥–∞—Å—Ç—Å—è –∫—É–ø–∏—Ç—å "
                                 f"(<u>—Å–ø–æ–π–ª–µ—Ä: –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ</u>).\n"
                                 f"–ü–æ—ç—Ç–æ–º—É –ø—Ä–µ–¥–ª–∞–≥–∞—é –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, —á—Ç–æ–±—ã –≤—ã –ø–æ–Ω—è–ª–∏ –ø–æ—Ä—è–¥–æ–∫ "
                                 f"—á–∏—Å–µ–ª:")
                        time.sleep(3)
                        await callback.message.answer(
                            text=f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ –º–µ—Å—è—Ü —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä–∏–ø—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ $1000 "
                                 f"<b>(–¥–ª—è –≤–∞—Å —ç—Ç–æ ${round(1000 * round(self_cost_1_usdt, 2), 0)})</b> –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫—É–ø–∏—Ç—å –∞—Å–∏–∫–æ–≤ {asic[0][0]}"
                                 f" –Ω–∞ —Å—É–º–º—É ${round(((1000 * round(self_cost_1_usdt, 2) / (float(data['electricity_price']) * df['energy_consumption'] * 720 / 1000)) * df['price']).values[0], 0)}.\n"
                                 f"<b>–≠—Ç–æ –ø–æ—Ä—è–¥–∫–∞ {round((1000 * round(self_cost_1_usdt, 2) / (float(data['electricity_price']) * df['energy_consumption'] * 720 / 1000)).values[0], 1)} –∞—Å–∏–∫–æ–≤</b>.")
                        time.sleep(3)
                    await callback.message.bot.send_chat_action(
                        chat_id=callback.from_user.id,
                        action=ChatAction.TYPING)
                    await callback.message.answer(
                        text="P.P.S. –¢–∞–∫–∂–µ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∑–∞–±—ã–≤–∞—Ç—å, —á—Ç–æ <b>—Å–ª–æ–∂–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ ‚õèÔ∏è —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Ç–µ—Ç</b> –ø–æ"
                             " –≤—Å–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–∞–º, –∏ <b>—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –º–æ–≥–ª–∏ –±—ã "
                             "–Ω–∞–º–∞–π–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –±–æ–ª—å—à–µ, —á–µ–º –∑–∞–≤—Ç—Ä–∞ (–≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤).</b> "
                             "–ù–æ —Ä–µ—à–∞—Ç—å, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –≤–∞–º!\n\n"
                             "–†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è <b>—Å –¥–∞—à–±–æ—Ä–¥–æ–º –≤ BI-—Å–∏—Å—Ç–µ–º–µ Yandex Datalens</b> - "
                             "—Ç–∞–º –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É —Å–æ–±–æ–π –ø–æ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏, "
                             "–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º! –í–æ—Ç —Å—Å—ã–ª–∫–∞: "
                             "<u>https://datalens.yandex/kth6k05xlg9c8</u>\n\n"
                             "–î–∞—à–±–æ—Ä–¥ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ –¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. –¢–∞–∫–∂–µ –ø—Ä–æ—Å—å–±–∞ –æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—à–∏ "
                             "–ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏–¥–µ–∏ –∏ –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –±–æ—Ç—É –∏ –¥–∞—à–±–æ—Ä–¥—É –ø–æ –∫–Ω–æ–ø–∫–µ <b>¬´–û—Å—Ç–∞–≤–∏—Ç—å "
                             "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª</b>.",
                        reply_markup=keyboards.fomo_end)
                    functions.writing_logs(datetime.now().strftime("%Y-%m-%d %H:%M:%S"), callback.from_user.id,
                                           'cheap_coins_result')
                else:
                    await callback.message.answer(
                        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ—Ç –º–∞–π–Ω–µ—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–¥–∞–∂–µ :(\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                        reply_markup=keyboards.return_to_main_menu)


            finally:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                db.close()
    else:
        await callback.message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
                                      reply_markup=keyboards.return_to_main_menu)

    await state.clear()
